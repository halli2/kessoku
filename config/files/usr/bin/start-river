#!/usr/bin/sh

# Ported from start-sway

## Internal variables
readonly _RIVER_COMMAND="/usr/bin/river"
RIVER_EXTRA_ARGS=""

## Internal variables

## Apply `environment.d(5)` customizations
# This can be used to share the custom environment configs with systemd --user.
# Importing `systemd --user show-environment` here may have unexpected
# consequences, such as getting a leftover `WAYLAND_DISPLAY` or `DISPLAY`
# and breaking Sway startup. Thus, the direct call to a systemd generator.
set -o allexport
eval "$(/usr/lib/systemd/user-environment-generators/30-systemd-environment-d-generator)"
set +o allexport

## Load River-specific user environment customizations
if [ -f "${XDG_CONFIG_HOME:-$HOME/.config}/river/environment" ]; then
    set -o allexport
    # shellcheck source=/dev/null
    . "${XDG_CONFIG_HOME:-$HOME/.config}/river/environment"
    set +o allexport
fi

## Unexport internal variables
# export -n is not POSIX :(
_RIVER_EXTRA_ARGS="$RIVER_EXTRA_ARGS"
unset RIVER_EXTRA_ARGS

## Log all exported WLR_ variables
if _WLR_VARS=$(env | grep '^WLR_'); then
    printf 'environment variables for wlroots: %s' "$_WLR_VARS" |
        tr '\n' ' ' |
        systemd-cat -p notice -t "${_RIVER_COMMAND##*/}"
fi

# Start river with extra arguments and send output to the journal
# shellcheck disable=SC2086 # quoted expansion of EXTRA_ARGS can produce empty field
exec systemd-cat -- $_RIVER_COMMAND $_RIVER_EXTRA_ARGS "$@"

# Target to start user services after startup
# "systemctl --user start river-session.target" in river config
systemctl --user stop river-session.target

